% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/install_local.R
\name{install_local}
\alias{install_local}
\title{Install package locally using \code{renv} if available.}
\usage{
install_local(
  path = ".",
  ...,
  force = TRUE,
  upgrade = "never",
  quiet = TRUE,
  wd = here::here()
)
}
\arguments{
\item{path}{path to local directory, or compressed file (tar, zip, tar.gz
tar.bz2, tgz2 or tbz)}

\item{...}{Other arguments passed on to \code{\link[utils:install.packages]{utils::install.packages()}}.}

\item{force}{Force installation, even if the remote state has not changed
since the previous install.}

\item{upgrade}{Should package dependencies be upgraded? One of "default", "ask", "always", or "never". "default"
respects the value of the \code{R_REMOTES_UPGRADE} environment variable if set,
and falls back to "ask" if unset. "ask" prompts the user for which out of
date packages to upgrade. For non-interactive sessions "ask" is equivalent
to "always". \code{TRUE} and \code{FALSE} are also accepted and correspond to
"always" and "never" respectively.}

\item{quiet}{If \code{TRUE}, suppress output.}

\item{wd}{the project root directory of the current project (defaults to \code{here::here()})}
}
\description{
\code{devtools::install_local} does not play well with \code{renv} in this version
of \code{install_local} we intercept installation of locally developed packages
when we are in a \code{renv} managed project and installing a local dependency, it builds a source project into
\code{renv} cellar and installs it from there. This allows a copy of a locally developed package to
be deployed with the \code{renv} managed analysis project without specifically being
deployed to \code{CRAN} or \code{r-universe}.
}
\details{
If installed locally for a non-\code{renv} project (e.g. a package development)
the usual behaviour applies to version management. Installation of new versions
of the project will happen when the package is released and then installed from the
release location (e.g. github, cran, r-universe).

If a locally developed package is deployed to an \code{renv} project once it is released onto a valid distribution
platform e.g. CRAN, r-universe or github, we will want to use that version in
our \code{renv}. This we can do using the \code{rebuild = TRUE} option of \code{renv::install}, e.g.:
\verb{renv::install(...pkg name/github..., repo = ...r-universe?..., rebuild = TRUE)}
followed by a \code{renv::snapshot()} to update the lock file. The locally built
package version will remain in the \verb{<projroot>/renv/local} cellar until removed
by hand.
}
\examples{
\dontrun{
dir <- tempfile()
dir.create(dir)
pkg <- download.packages("testthat", dir, type = "source")
install_local(pkg[, 2])
}
}
\seealso{
Other package installation: 
\code{\link[remotes]{install_bioc}()},
\code{\link[remotes]{install_bitbucket}()},
\code{\link[remotes]{install_cran}()},
\code{\link[remotes]{install_dev}()},
\code{\link[remotes]{install_github}()},
\code{\link[remotes]{install_gitlab}()},
\code{\link[remotes]{install_git}()},
\code{\link[remotes]{install_svn}()},
\code{\link[remotes]{install_url}()},
\code{\link[remotes]{install_version}()}
}
